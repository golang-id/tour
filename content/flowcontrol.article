Perintah kontrol alur: for, if, else, switch, dan defer
Belajar cara mengontrol alur kode dengan kondisional, pengulangan, `switch` dan `defer`.

Para Penggubah Go
https://golang.org

* Pengulangan ("for")

Go hanya memiliki satu konstruk pengulangan, yaitu `for`.

Dasar dari pengulangan `for` yaitu memiliki tiga komponen yang dipisahkan oleh
titik-koma:

- perintah awal: dieksekusi sebelum iterasi pertama
- ekspresi kondisi: dievaluasi sebelum iterasi pertama
- perintah akhir: dieksekusi disetiap akhir iterasi

Perintah awal biasanya berupa deklarasi variabel singkat, dan variabel yang
dideklarasikan tersebut hanya dapat digunakan dalam skop perintah `for`.

Pengulangan akan berhenti saat ekspresi kondisi bernilai `false`.

*Catatan:* Tidak seperti bahasa C, Java, atau JavaScript, tidak ada tanda
kurung yang digunakan menutupi ketiga komponen dari perintah `for` dan tanda
kurung kurawal `{`}` selalu dibutuhkan..

.play flowcontrol/for.go

* Pengulangan lanjutan

Perintah awal dan akhir adalah opsional. 

.play flowcontrol/for-continued.go

* For adalah Go-nya "while"

Dengan cara ini anda bisa menghilangkan titik-koma: `while` nya C dieja dengan `for` pada Go.

.play flowcontrol/for-is-gos-while.go

* Pengulangan selamanya

Jika anda mengosongkan kondisi maka pengulangan akan berjalan selamanya, dengan ini pengulangan tanpa henti dapat diekspresikan dengan singkat.

.play flowcontrol/forever.go

* Kondisi ("if")

Perintah `if` mirip seperti pada pengulangan `for`; ekspresinya tidak harus
ditutupi dengan tanda-kurung `(`)` namun tanda `{`}` diharuskan.

.play flowcontrol/if.go

* Kondisi "if" singkat

Seperti pada `for`, perintah `if` bisa diawali dengan perintah singkat untuk dieksekusi sebelum kondisi.

Variabel yang dideklarasikan pada perintah singkat tersebut hanya berlaku sampai lingkup sampai kondisi `if` berakhir.

(Coba gunakan `v` di akhir perintah `return`.)

.play flowcontrol/if-with-a-short-statement.go

* Kondisi "if" dan "else"

Variabel yang dideklarasikan dalam perintah singkat `if` juga dapat digunakan
dalam blok `else`.

(Kedua pemanggilan ke `pow` dieksekusi dan dikembalikan sebelum pemanggilan ke
 `fmt.Println` di `main` dimulai.)

.play flowcontrol/if-and-else.go

* Latihan: Pengulangan dan Fungsi

Cara sederhana untuk bermain dengan pengulangan dan fungsi yaitu dengan
mengimplementasikan fungsi kuadrat: diberikan sebuah input bilangan x, kita
akan cari bilangan z yang mana z² paling mendekati ke x.

Komputer biasanya menghitung akar kuadrat dari x menggunakan sebuah
pengulangan.
Dimulai dari nilai z, kita dapat mengatur z berdasarkan berapa dekat z²
terhadap x, menghasilkan terkaan yang lebih mendekati:

	z -= (z * z - x) / (2*z)

Dengan mengulangi persamaan di atas akan membuat pencarian kita semakin
mendekati nilai kuadrat yang sebenarnya.

Implementasikan persamaan tersebut dalam `func`Sqrt` yang telah disediakan.
Nilai awal yang aman untuk z adalah 1, berapapun inputnya.
Sebagai permulaan, ulangi perhitungan 10 kali dan cetak nilai z.
Lihat seberapa dekat hasil perhitungan anda dengan jawaban dari beragam nilai
x (1, 2, 3, ...) dan seberapa cepat tebakan anda diperbaiki.

Petunjuk: untuk mendeklarasikan dan menginisialisasi nilai floating point,
gunakan sintaks floating point atau konversi:

	z := 1.0
	z := float64(1)

Selanjutnya, ubah kondisi pengulangan untuk berhenti saat nilainya sudah tidak
berubah lagi (atau hanya berubah dengan delta yang sangat kecil).
Lihat apakah iterasinya lebih sedikit atau lebih banyak dari 10 iterasi.
Coba nilai terkaan awal untuk z, misalnya x, atau x/2.
Seberapa dekat hasil anda dengan nilai
[[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] 
dari pustaka standar?

(*Catatan:* Jika anda tertarik dengan rincian dari algoritma, persamaan z² − x
adalah seberapa jauh nilai z² dari yang diinginkan (x), dan pembagian dengan
(2*z) adalah turunan dari z², untuk melihat berapa banyak kita harus
memperbaiki nilai z dengan melihat berapa cepat z² berubah.
Pendekatan ini disebut dengan
[[https://en.wikipedia.org/wiki/Newton%27s_method][metode Newton]].
Ia bekerja dengan baik untuk beragam fungsi,
terutama kuadrat.

.play flowcontrol/exercise-loops-and-functions.go

* Perintah "switch"

Perintah switch untuk mempermudah membuat beberapa perintah kondisi
`if`-`else`.
Go akan menjalankan case pertama yang nilainya sama dengan ekspresi kondisi
yang diberikan.

Perintah switch pada Go hampir sama dengan bahasa C, C++, Java, Javascript,
dan PHP;
hanya saja pada Go akan menjalankan case yang terpilih, bukan semua case yang
ada selanjutnya.
Efeknya, perintah `break` yang biasanya dibutuhkan diakhir setiap case pada
bahasa lainnya dibuat secara otomatis oleh Go.
Perbedaan penting lainnya yaitu ekspresi kondisi case pada Go tidak harus
konstanta, dan nilainya tidak harus integer.

.play flowcontrol/switch.go

* Urutan evaluasi "switch"

Kondisi pada `switch` dievaluasi dari atas ke bawah, berhenti saat sebuah
kondisi sukses.

Sebagai contoh,

	switch i {
	case 0:
	case f():
	}

tidak akan memanggil fungsi `f` jika `i==0`.

#appengine: *Catatan:* waktu dalam Go playground selalu berawal dari
#appengine: 2009-11-10 23:00:00 UTC, sebuah nilai yang makna bisa dicari oleh
#appengine: pembaca.

.play flowcontrol/switch-evaluation-order.go

* Perintah "switch" tanpa kondisi

Perintah `switch` tanpa sebuah kondisi sama seperti `switch`true`.

Konstruksi ini merupakan cara yang bersih untuk menulis rantaian if-then-else
yang panjang.

.play flowcontrol/switch-with-no-condition.go

* Perintah "defer"

Perintah `defer` menunda eksekusi dari sebuah fungsi sampai fungsi yang
melingkupinya selesai.

Argumen untuk pemanggilan `defer` dievaluasi langsung, tapi pemanggilan fungsi
tidak dieksekusi sampai fungsi yang melingkupinya selesai.

.play flowcontrol/defer.go

* Penundaan bertumpuk

Fungsi yang dipanggil dengan `defer` di- _push_ ke sebuah _stack_.
Saat fungsi berakhir, panggilan yang tadi ditunda dieksekusi dengan urutan
last-in-first-out (yang terakhir masuk menjadi pertama keluar).

Untuk belajar lebih lanjut tentang perintah `defer` bacalah
[[https://blog.golang.org/defer-panic-and-recover][blog berikut]].

.play flowcontrol/defer-multi.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan ke
[[javascript:click(".next-page")][pelajaran selanjutnya]].
