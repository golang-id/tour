Paket, variabel, dan fungsi.
Belajar komponen dasar dari program Go.

Para Penggubah Go
https://golang.org

* Paket

Setiap program Go terbuat dari paket-paket (`package`).

Program mulai berjalan dalam paket `main`.

Program ini menggunakan paket dengan meng-`import` `"fmt"` dan `"math/rand"`.

Aturannya, nama paket sama dengan elemen terakhir dari path `import`.
Sebagai contohnya, paket `"math/rand"` terdiri dari berkas-berkas yang dimulai dengan perintah `package`rand`.

#appengine: *Catatan:* Lingkungan di mana program di situs ini berjalan adalah
#appengine: deterministik, sehingga setiap kali anda mengeksekusi contoh
#appengine: program `rand.Intn` akan selalu mengembalikan angka yang sama.
#appengine: 
#appengine: (Untuk mendapatkan angka yang acak, tambahkan pembangkit angka;
#appengine: lihat
#appengine: [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]]
#appengine: .)

.play basics/packages.go

* Import

Kode ini mengelompokan `import` di dalam tanda kurung, atau disebut juga perintah `import` yang "difaktorkan".

Anda juga bisa menulis perintah `import`, seperti:

	import "fmt"
	import "math"

Tapi lebih baik menggunakan perintah import yang difaktorkan.

.play basics/imports.go

* Nama-nama yang diekspor

Pada bahasa Go, sebuah nama diekspor jika diawali dengan huruf besar.
Sebagai contohnya, `Pizza` itu nama yang diekspor, sebagaimana juga `Pi`, yang
diekspor dari paket `math`.

`pizza` dan `pi` tidak diawali dengan huruf besar, maka mereka tidak diekspor. 

Saat mengimpor sebuah paket, anda hanya bisa mengacu pada nama yang diekspor.
Setiap nama yang tidak diekspor tidak akan bisa diakses dari luar paket.

Jalankan kode disebelah.
Perhatikan akan adanya pesan kesalahan.

Untuk memperbaikinya, ganti nama `math.pi` dengan `math.Pi` dan coba kembali. 

.play basics/exported-names.go

* Fungsi

Sebuah fungsi bisa tanpa argumen atau banyak argumen.

Pada contoh ini, `add` memiliki dua parameter dengan tipe `int`.

Perhatikan bahwa tipe berada _setelah_ nama variabel.

(Untuk mengetahui kenapa tipe ditulis seperti itu, lihat
[[https://blog.golang.org/gos-declaration-syntax][artikel Go tentang deklarasi sintaks]].)

.play basics/functions.go

* Fungsi lanjutan

Saat dua atau lebih parameter fungsi memiliki tipe yang sama, anda bisa menghilangkan semua tipe kecuali yang terakhir.

Pada contoh ini, kita singkat

	x int, y int

menjadi

	x, y int

.play basics/functions-continued.go

* Banyak Kembalian

Sebuah fungsi dapat mengeluarkan banyak kembalian.

Fungsi `swap` mengembalikan dua `string`.

.play basics/multiple-results.go

* Kembalian bernama

Nilai kembalian pada Go bisa dinamakan.
Jika nilai kembalian memiliki nama, mereka diperlakukan seperti variabel yang
didefinisikan pada fungsi.

Penamaan tersebut seharusnya digunakan untuk mendokumentasikan makna dari
nilai kembalian.

Sebuah perintah `return` tanpa kembalian mengembalikan nilai sekarang dari
setiap variabel kembalian.
Hal ini dikenal dengan kembalian "naked".

Perintah kembalian "naked" sebaiknya hanya digunakan pada fungsi yang singkat,
seperti pada contoh di sebelah, karena bisa mengganggu pembacaan kode
bila digunakan pada fungsi yang panjang.

.play basics/named-results.go

* Variabel

Perintah `var` mendeklarasikan daftar variabel; seperti pada daftar argumen pada fungsi, tipenya berada di akhir.

Perintah `var` bisa ditulis pada tingkat paket atau fungsi, seperti pada contoh sebelah.

.play basics/variables.go

* Variabel dengan inisialisasi

Deklarasi sebuah variabel bisa mengikutkan inisialisasi, satu per variabel.

Jika sebuah inisialisasi ada, maka tipe bisa dihilangkan; variabel akan memiliki tipe dari inisialisasi.

.play basics/variables-with-initializers.go

* Deklarasi variabel singkat

Dalam sebuah fungsi, perintah singkat `:=` bisa digunakan menggantikan `var` dengan tipe implisit.

Di luar sebuah fungsi, setiap perintah harus dimulai dengan kata kunci (`var`, `func`, dst), sehingga `:=` tidak bisa digunakan.

.play basics/short-variable-declarations.go

* Tipe dasar

Tipe dasar pada Go yaitu,

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias untuk uint8

	rune // alias untuk int32
	     // merepresentasikan sebuah kode Unicode

	float32 float64

	complex64 complex128

Contoh sebelah memperlihatkan variabel dengan beberapa tipe, dan juga deklarasi variabel bisa "difaktorkan" ke dalam blok, seperti pada perintah `import`.

Tipe `int`, `uint`, dan `uintptr` biasanya memiliki panjang 32 bits pada sistem 32-bit dan 64 bits pada sistem 64-bit.
Saat anda membutuhkan nilai integer anda sebaiknya menggunakan tipe `int` kecuali anda memiliki alasan tertentu menggunakan tipe berukuran khusus atau _unsigned_integer_.

.play basics/basic-types.go

* Nilai kosong

Variabel yang dideklarasikan tanpa nilai awal diberikan _nilai_kosong_.

Nilai kosong adalah:

- `0` untuk tipe numerik,
- `false` untuk tipe boolean, dan
- `""` (string kosong) untuk string.

.play basics/zero.go

* Konversi Tipe

Ekspresi `T(v)` mengkonversi nilai `v` ke tipe `T`.

Beberapa konversi numerik:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Atau, sederhananya:

	i := 42
	f := float64(i)
	u := uint(f)

Tidak seperti C, perintah pengisian nilai pada Go antara item dengan tipe
berbeda membutuhkan konversi eksplisit.
Coba hilangkan konversi `float64` atau `int` pada contoh sebelah dan lihat apa
yang terjadi.

.play basics/type-conversions.go

* Inferensi tipe

Saat mendeklarasikan sebuah variabel tanpa menentukan tipe eksplisitnya (baik menggunakan sintaks `:=` atau `var`), tipe variabel disamakan dengan nilai di sebelah kanannya.

Bila sisi kanan dari deklarasi ditulis tipenya, maka variabel baru memiliki tipe yang sama:

	var i int
	j := i // j is an int

Tapi bila sisi kanan berupa konstanta numerik, variabel baru bisa jadi `int`, `float64`, atau `complex128` bergantung kepada presisi dari konstanta:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Coba ubah nilai awal dari `v` pada contoh kode dan perhatikan bagaimana tipenya berubah.

.play basics/type-inference.go

* Konstanta

Konstanta dideklarasikan seperti variabel, tapi dengan kata `const`.

Konstanta bisa bernilai karakter, string, boolean, atau numerik.

Konstanta tidak bisa dideklarasikan dengan sintaks `:=`.

.play basics/constants.go

* Konstanta Numerik

Konstanta numerik adalah _nilai_ dengan presisi-tinggi.

Konstanta yang tidak bertipe menggunakan tipe yang dibutuhkan sesuai dengan konteksnya.

Coba cetak juga `needInt(Big)`.

(An `int` can store at maximum a 64-bit integer, and sometimes less.)

.play basics/numeric-constants.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan dengan
[[javascript:click(".next-page")][pelajaran selanjutnya]].
