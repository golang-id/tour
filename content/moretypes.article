Tipe lanjut: struct, slice, dan map.
Belajar cara mendefinisikan tipe: pelajaran ini membahas struct, array, slice, dan map.

Para Penggubah Go
https://golang.org

* Pointer

Go memiliki pointer.
Sebuah pointer menyimpan alamat dari sebuah variabel.

Tipe `*T` adalah pointer ke sebuah nilai `T`.
Nilai kosongnya adalah `nil`.

	var p *int

Operator `&` mengembalikan operan pointer dari variabel.

	i := 42
	p = &i

Operator `*` mengembalikan nilai yang ditunjuk oleh pointer.

	fmt.Println(*p) // baca nilai i lewat pointer p
	*p = 21         // set nilai i lewat pointer p

Cara ini disebut dengan "dereferencing" atau "indirecting".

Tidak seperti C, Go tidak memiliki fungsi aritmatika pada pointer.

.play moretypes/pointers.go

* Tipe data abstrak "struct"

Sebuah `struct` adalah kumpulan dari berbagai variabel.

.play moretypes/structs.go

* Bagian dari struct

Bagian dari struct diakses menggunakan sebuah titik.

.play moretypes/struct-fields.go

* Pointer ke struct

Untuk mengakses field `X` dari sebuah struct bila kita memiliki pointer ke
sebuah struct `p`, kita dapat menulisnya dengan `(*p).X`.
Namun, notasi tersebut tidak praktis, sehingga bahasa Go membolehkan kita
mengaksesnya langsung dengan menulis hanya `p.X`.

.play moretypes/struct-pointers.go

* Inisialisasi struct

Sebuah `struct` bisa dibuat dengan mengisinya dengan nilai bagian-bagiannya.

Anda juga bisa mengisi hanya sebagian dari kolom dengan menggunakan sintaks `Name:` (urutan dari bagian-bagiannya tidak berpengaruh).

Prefik `&` mengembalikan sebuah pointer ke `struct`.

.play moretypes/struct-literals.go


* Array

Deklarasi tipe dengan `[n]T` adalah untuk array dengan jumlah `n` dan bertipe `T`.

Ekspresi

	var a [10]int

mendeklarasikan sebuah variabel `a` sebagai sebuah array dari sepuluh integer.

Panjang sebuah array adalah bagian dari tipenya, jadi array tidak bisa diubah ukurannya.
Hal ini sepertinya membatasi, tapi jangan khawatir;
Go menyediakan cara yang mudah untuk bekerja dengan array.

.play moretypes/array.go


* Potongan ("slice")

Sebuah array memiliki ukuran yang tetap.
Sebuah slice ukurannya bisa dinamis, bisa mengacu secara fleksibel ke elemen
dalam sebuah array.
Dalam praktiknya, slice lebih sering digunakan daripada array.

Type `[]T` adalah sebuah slice dengan elemen bertipe `T`.

Sebuah slice dibentuk dengan menspesifikasikan dua indeks, batas bawah dan
batas atas, dipisahkan oleh sebuah tanda titik-dua:

	a[bawah : atas]

Notasi di atas memotong rentang dari slice `a` yang mengikutkan elemen
`bawah`, tapi tidak memasukan bagian terakhir (atas).

Ekspresi berikut membuat sebuah slice yang mengikutkan elemen 1 sampai 3 dari
slice `a`:

	a[1:4]

.play moretypes/slices.go


* Slice adalah referensi ke array

Sebuah slice tidak menyimpan data, ia hanya mendeskripsikan sebuah bagian dari
array.

Mengubah nilai dari elemen dari sebuah slice juga mengubah elemen di
array-nya.

.play moretypes/slices-pointers.go


* Sifat Dasar Slice

Sebuah slice mirip dengan array tanpa panjang.

Berikut ini adalah sebuah array:

	[3]bool{true, true, false}

Dan berikut ini membuat array yang sama seperti di atas, kemudian membuat
sebuah slice yang mengacu kepadanya:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Nilai Default Slice

Saat memotong, anda bisa mengindahkan batas bawah atau atas sehingga Go akan
menggunakan nilai default-nya.

Nilai default-nya adalah nol untuk batas bawah dan panjang dari slice untuk
batas atas.

Untuk sebuah array berikut,

	var a [10]int

ekspresi slice berikut adalah setara:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Panjang dan Kapasitas Slice

Sebuah slice memiliki _panjang_ dan _kapasitas_.

Panjang dari sebuah slice yaitu jumlah dari elemen yang dimilikinya.

Kapasitas dari sebuah slice adalah jumlah dari elemen array yang dikandungnya,
dihitung dari elemen pertama di dalam slice.

Panjang dan kapasitas dari sebuah slice `s` dapat diambil dengan menggunakan
ekspresi `len(s)` dan `cap(s)`.

Anda bisa memperluas panjang dari sebuah slice dengan me-motong-ulang, bila
kapasitasnya cukup.
Coba ubah salah satu operasi slice di contoh program sebelah untuk
memperluasnya melebihi kapasitasnya dan lihat apa yang terjadi.

.play moretypes/slice-len-cap.go


* Slice kosong

Nilai nol dari slice adalah `nil`.

Slice yang kosong memiliki panjang dan kapasitas 0, dan tidak memiliki array
di dalamnya.

.play moretypes/nil-slices.go


* Membuat slice dengan `make`

Slice dapat dibuat dengan fungsi `make`;
dengan fungsi tersebut anda bisa membuat array dengan ukuran yang dinamis.

Fungsi `make` mengalokasikan array yang dikosongkan dan mengembalikan sebuah
slice yang mengacu pada array tersebut.

	a := make([]int, 5)  // len(a)=5

Untuk menentukan kapasitasnya, tambahkan argumen ketiga pada `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slice dari slice

Slice bisa mengandung tipe apapun, termasuk slice lainnya.

.play moretypes/slices-of-slice.go


* Menambahkan elemen ke slice

Sangat umum untuk menambahkan elemen ke slice, sehingga Go menyediakan fungsi
`append`.
[[https://golang.org/pkg/builtin/#append][Dokumentasinya]]
menjelaskan lebih lanjut dari fungsi `append`.

	func append(s []T, vs ...T) []T

Parameter pertama `s` dari `append` adalah sebuah slice dengan tipe `T`, dan
sisanya adalah nilai `T` yang akan ditambahkan ke slice.

Hasil dari `append` yaitu sebuah slice yang berisi semua elemen dari slice
awal berikut dengan nilai yang ditambahkan.

Jika array awal `s` terlalu kecil untuk nilai yang ditambahkan, maka array
yang lebih besar akan dialokasikan.
Kembaliannya yaitu slice yang merujuk ke array yang baru dialokasikan.

(Untuk belajar lebih lanjut tentang slice, bacalah artikel
[[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and
internals]].)

.play moretypes/append.go


* Rentang ("range")

Perintah `range` pada pengulangan `for` mengiterasi sebuah slice atau map.

When ranging over a slice, two values are returned for each iteration.
The first is the index, and the second is a copy of the element at that index.

.play moretypes/range.go


* Rentang lanjutan

Anda bisa melewati indeks atau nilai dengan operator `_`.

    for i, _ := range pow
    for _, value := range pow

Jika anda hanya menginginkan indeks saja, variabel kedua bisa dihilangkan.

    for i := range pow

.play moretypes/range-continued.go

* Latihan: Slice

Implementasikan `Pic`.
Fungsi tersebut harus mengembalikan sebuah slice dengan panjang `dy`, setiap
elemennya merupakan sebuah slice `dx` 8-bit unsigned integer.
Saat anda menjalankan program, ia akan menampilkan gambar anda,
mengiterpretasikan nilai integer dengan warna abu-abu.

Pilihan gambarnya terserah anda.
Fungsi menarik yang bisa diikutkan berupa `(x+y)/2`, `x*y`, dan `x^y`.

Petunjuk:

- Anda membutuhkan penggunaan sebuah pengulangan untuk mengalokasi `[]uint8` di dalam `[][]uint8`.

- Gunakan `uint8(intValue)` untuk mengkonversi antara tipe.

.play moretypes/exercise-slices.go


* Map

Sebuah map memetakan sebuah kunci (_key_) dengan nilainya.

Nilai kosong dari sebuah map adalah `nil`.
Sebuah map yang `nil` tidak memiliki kunci, tidak juga dapat ditambahkan kunci
baru.

Fungsi `make` mengembalikan sebuah map dengan tipenya, diinisialisasi dan siap
untuk digunakan.

.play moretypes/maps.go

* Penggunaan Map

Penggunaan map seperti pada penggunaan struct, tapi dengan membubuhkan key-nya.

.play moretypes/map-literals.go

* Penggunaan map lanjutan

Jika level teratas dari tipe hanya nama tipe, anda bisa menghilangkannya dari inisialisasi elemen map.

.play moretypes/map-literals-continued.go

* Operasi map

Pengisian atau mengubah elemen dalam map `m`:

	m[key] = elem

Mengambil elemen:

	elem = m[key]

Menghapus elemen:

	delete(m, key)

Menguji apakah sebuah key ada dalam map:

	elem, ok = m[key]

Jika `key` ada dalam `m`, `ok` bernilai `true`.
Jika tidak ada, `ok` bernilai `false`.

Jika `key` tidak ada dalam map, maka `elem` berisi nilai kosong sesuai dengan
tipe elemen.

*Catatan:* Jika `elem` atau `ok` belum dideklarasikan anda bisa menggunakan
bentuk deklarasi singkat berikut:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Latihan: map

Implementasikan `WordCount`.
Fungsi tersebut mengembalikan sebuah map dari penghitungan setiap "kata" di dalam string `s`.
Fungsi `wc.Test` menjalankan pengujian terhadap fungsi yang diberikan dan mencetak sukses atau salah.

Anda mungkin menemukan artikel berikut
[[https://golang.org/pkg/strings/#Fields][strings.Fields]]
membantu anda.

.play moretypes/exercise-maps.go

* Nilai Fungsi

Fungsi adalah suatu nilai juga.
Fungsi dapat dikirimkan kemanapun seperti nilai lainnya.

Nilai fungsi bisa digunakan sebagai argumen pada fungsi dan sebagai nilai
kembalian.

.play moretypes/function-values.go

* Fungsi closure

Fungsi pada Go bisa _closure_.
_Closure_ adalah sebuah nilai fungsi yang merujuk variabel dari blok fungsinya.
Fungsi closure bisa mengakses dan mengisi variabel yang dirujuk;
dalam artian fungsi tersebut "terikat" ke variabel.

Sebagai contohnya, fungsi `adder` mengembalikan sebuah closure.
Setiap closure terikat dengan variabel `sum` -nya sendiri.

.play moretypes/function-closures.go

* Latihan: Fibonacci dengan closure

Mari bermain dengan fungsi.

Implementasikan sebuah fungsi `fibonacci` yang mengembalikan sebuah fungsi
(closure) yang mengembalikan
[[https://id.wikipedia.org/wiki/Bilangan_Fibonacci][bilangan fibonacci]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan dengan
[[javascript:click(".next-page")][pelajaran selanjutnya]].
