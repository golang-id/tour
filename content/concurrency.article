Konkurensi
Go menyediakan konstruksi konkurensi sebagai bagian dari inti bahasanya.  Pelajaran kali ini menjelaskan dan memberikan beberapa contoh penggunaannya.

Para Penggubah Go
https://golang.org

* Goroutines

Sebuah _goroutine_ yaitu suatu thread ringan yang diatur oleh Go runtime.
Perintah

	go f(x, y, z)

memulai sebuah goroutine baru `f` dengan menjalankan

	f(x, y, z)

Evaluasi dari nilai `f`, `x`, `y`, dan `z` terjadi di goroutine yang memanggil
dan eksekusi dari `f` terjadi di goroutine yang baru.

Goroutine berjalan di ruang alamat yang sama, sehingga akses ke
_shared_memory_ harus disinkronisasi.
Paket
[[https://golang.org/pkg/sync/][`sync`]]
menyediakan fungsi primitif untuk sinkronisasi, walaupun anda tidak terlalu
membutuhkannya karena ada fungsi primitif lainnya.
(Lihat slide selanjutnya.)

.play concurrency/goroutines.go

* Kanal

Kanal adalah sebuah penghubung tipe yang mana anda bisa mengirim dan menerima
nilai dengan operator kanal, `<-`.

	ch <- v    // Kirim v ke kanal ch.
	v := <-ch  // Terima dari ch, dan simpan nilainya ke v.

(Aliran data sesuai dengan arah panah.)

Seperti map dan slice, kanal harus dibuat sebelum digunakan:

	ch := make(chan int)

Secara bawaan, pengiriman dan penerimaan ditahan sampai sisi yang lain siap.
Hal ini membolehkan goroutine untuk melakukan sinkronisasi tanpa melakukan
penguncian secara eksplisit atau menggunakan variabel kondisi.

Contoh kode menjumlahkan angka yang ada di `slice`, dengan mendistribusikan
kerja antara dua goroutine.
Saat kedua goroutine selesai, hasil akhirnya kemudian akan dihitung.

.play concurrency/channels.go

* Kanal dengan buffer

Kanal memiliki _buffer_.
Cukup dengan menambahkan panjang buffer ke argumen kedua pada `make` untuk
menginisialisasi buffer kanal:

	ch := make(chan int, 100)

Pengiriman ke kanal buffer akan ditahan bila buffer telah penuh.
Penerimaan akan ditahan saat buffer kosong.

Ubahlah contoh untuk memenuhi buffer dan lihat apa yang terjadi.

.play concurrency/buffered-channels.go

* "range" dan "close"

Pengirim dapat menutup (`close`) sebuah kanal untuk menandakan bahwa tidak ada
lagi data yang dikirim.
Penerima dapat memeriksa apakah kanal telah ditutup dengan menambahkan
parameter kedua pada ekspresi penerimaan:

	v, ok := <-ch

`ok` bernilai `false` jika tidak ada lagi nilai yang diterima dan kanal telah
ditutup.

Pengulangan `for`i`:=`range`c` menerima nilai dari kanal berulang kali sampai
ditutup.

*Catatan:* Hanya pengirim yang menutup kanal, penerima tidak pernah menutupnya.
Mengirim ke kanal yang telah tertutup akan menyebabkan kepanikan.

*Catatan*lain:* Kanal tidak seperti file; yang mana anda tidak selalu perlu
menutupnya.
Penutupan hanya diperlukan saat penerima harus diberitahu bahwa tidak ada lagi
nilai yang akan diterima, misalnya untuk menghentikan pengulangan pada
`range`.

.play concurrency/range-and-close.go

* Perintah "select"

Perintah `select` membuat goroutine menunggu operasi komunikasi.

`select` menahan pembacaan sampai salah satu kondisinya dapat berjalan,
kemudian ia mengeksekusi kondisi tersebut.
Ia memilih salah satu kondisi secara acak jika banyak kondisi telah siap.

.play concurrency/select.go

* Seleksi bawaan

Kondisi `default` pada `select` dijalankan jika tidak ada kondisi yang siap.

Gunakan kondisi `default` untuk mencoba mengirim dan menerima tanpa diblok:

	select {
	case i := <-c:
		// use i
	default:
		// receiving from c would block
	}

.play concurrency/default-selection.go

* Latihan: Binary Tree yang sama

Ada banyak cara membangun sebuah _binary_tree_ dengan urutan nilai yang sama
tersimpan di _leave_ nya.
Sebagai contohnya, berikut dua binary tree yang menyimpan urutan 1, 1, 2, 3,
5, 8, 13.

.image /content/img/tree.png

Sebuah fungsi yang memeriksa apakah dua binary tree menyimpan urutan yang
sama, akan cukup kompleks bila diiimplementasikan pada kebanyakan bahasa
pemrograman.
Kita akan gunakan konkurensi dan kanal untuk menulis sebuah solusi sederhana
menggunakan Go.

Contoh ini menggunakan paket `tree`, yang mendefinisikan tipe:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Lanjutkan deskripsi pada [[javascript:click(".next-page")][halaman selanjutnya]].

* Latihan: Binary Tree yang sama

*1.* Implementasikan fungsi `Walk`.

*2.* Uji fungsi `Walk`.

Fungsi `tree.New(k)` membuat binary tree yang secara acak-terstuktur (tetapi
selalu terurut) yang menyimpan nilai `k`, `2k`, `3k`, ..., `10k`.

Buat sebuah kanal baru `ch` dan jalankan fungsi `Walk`

	go Walk(tree.New(1), ch)

Kemudian baca dan cetak 10 nilai dari kanal.
Ia harusnya mengeluarkan angka 1, 2, 3, ..., 10.

*3.* Implementasikan fungsi `Same` menggunakan `Walk` untuk menentukan apakah
`t1` dan `t2` menyimpan nilai yang sama.

*4.* Uji fungsi `Same`.

`Same(tree.New(1),`tree.New(1))` mengembalikan nilai `true`, dan
`Same(tree.New(1),`tree.New(2))` mengembalikan nilai `false`.

Dokumentasi untuk `Tree` bisa ditemukan
[[https://godoc.org/golang.org/x/tour/tree#Tree][di sini]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Kita telah melihat bagaimana _channel_ sangat bagus untuk komunikasi antara
beberapa _goroutine_.

Namun bagaimana jika kita tidak ingin komunikasi?
Bagaimana jika kita hanya ingin memastikan hanya satu goroutine yang dapat
mengakses suatu variabel pada satu waktu untuk menghindari konflik?

Konsep ini disebut juga dengan _mutual_exclusion_, dan nama umum untuk
struktur data yang menyediakan fungsi tersebut adalah _mutex_.

Pustaka standar Go menyediakan mutual exclusion dengan
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]]
dan dua fungsinya:

- `Lock`
- `Unlock`

Kita bisa mendefinisikan sebuah blok kode untuk dieksekusi secara
_mutual_exclusion_ dengan mengungkungnya dengan pemanggilan fungsi `Lock` dan
`Unlock` seperti yang terlihat pada method `Inc`.

Kita juga bisa menggunakan `defer` untuk memastikan mutex akan dibuka kembali
seperti pada method `Value`.

.play concurrency/mutex-counter.go

* Latihan: Web Crawler

Dalam latihan ini anda akan menggunakan fitur konkurensi Go untuk
mem-paralelkan sebuah _web_crawler_.

Ubah fungsi `Crawl` untuk mengambil URL secara paralel tanpa ada duplikasi
(mengambil URL yang sama dua kali).

_Petunjuk_: anda bisa menyimpan _cache_ dari URL yang telah diambil
menggunakan sebuah `map`, tapi `map` tidak aman untuk digunakan secara
konkuren!

.play concurrency/exercise-web-crawler.go

* Kemana selanjutnya ...

#appengine: Anda dapat memulai dengan
#appengine: [[https://golang.org/doc/install/][memasang Go]].

#appengine: Saat anda telah memasang Go,
[[https://golang.org/doc/][Dokumentasi Go]]
adalah tempat yang bagus untuk
#appengine: melanjutkan.
memulai.
Dokumentasi tersebut berisi referensi, tutorial, video, dan banyak lagi.

Untuk belajar cara mengorganisir dan bekerja dengan kode Go, lihat 
[[https://www.youtube.com/watch?v=XCsL89YtqCs][siaran berikut]]
atau baca
[[https://golang.org/doc/code.html][Cara Menulis Kode Go]].

Jika anda membutuhkan bantuan dengan pustaka Go, lihat 
[[https://golang.org/pkg/][referensi paket]].
Untuk bantuan mengenai bahasa itu sendiri, anda mungkin bisa melihat
[[https://golang.org/ref/spec][Spesifikasi Bahasa]]
cukup dapat bisa dibaca.

Untuk mengeksplorasi lebih lanjut tentang model konkurensi dari Go, tontonlah
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Pola Konkurensi]]
([[https://talks.golang.org/2012/concurrency.slide][slide]])
dan
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Pola Konkurensi Go Lanjutan]]
([[https://talks.golang.org/2013/advconc.slide][slides]])
dan baca
[[https://golang.org/doc/codewalk/sharemem/][Berbagi Memory dengan Komunikasi]].

Untuk memulai membuat aplikasi web, tontonlah
[[https://vimeo.com/53221558][A simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][slides]])
dan baca tutorial
[[https://golang.org/doc/articles/wiki/][Menulis Aplikasi Web]].

Artikel
[[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]]
memberikan perspektif menarik tentang tipe fungsi pada Go.

[[https://blog.golang.org/][Blognya Go]]
memiliki sejumlah arsip artikel informatif tentang Go.

Kunjungi [[https://golang.org][golang.org]] untuk lebih lanjut.
