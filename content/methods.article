Method dan Interface
Pelajaran ini membahas method dan interface, konstruksi yang membuat objek dan perilakunya.

Para Penggubah Go
https://golang.org

* Method

Go tidak memiliki class.
Namun, anda bisa mendefinisikan method pada tipe.

Sebuah method adalah sebuah fungsi dengan argumen khusus _receiver_.

_receiver_ muncul pada bagian antara kata kunci `func` and nama method.

Pada contoh berikut, method `Abs` memiliki _receiver_ dengan tipe `Vertex`
bernama `v`.

.play methods/methods.go

* Method adalah fungsi

Ingat: sebuah method hanyalah fungsi dengan argumen sebuah _receiver_.

Berikut ini `Abs` ditulis sebagai fungsi biasa tanpa ada perubahan pada
fungsionalitas.

.play methods/methods-funcs.go

* Method lanjutan

Anda bisa mendeklarasikan method pada tipe selain `struct` juga.

Pada contoh berikut kita dapat melihat sebuah tipe numerik `MyFloat` dengan
method `Abs`.

Anda hanya bisa mendeklarasikan sebuah method dengan sebuah receiver yang
tipenya didefinisikan di paket yang sama dengan method-nya.
Anda tidak bisa mendeklarasikan sebuah method dengan receiver yang tipenya
didefinisikan di paket yang lain (termasuk tipe dasar seperti `int`).

.play methods/methods-continued.go

* Pointer-receiver

Anda bisa mendeklarasikan method dengan _receiver_ berupa pointer.

Hal ini berarti tipe _receiver_ memiliki sintaks `*T` untuk tipe `T`.
(Dan juga, `T` itu sendiri tidak bisa berupa pointer ke tipe dasar seperti
 `*int`.)

Sebagai contohnya, method `Scale` didefinisikan pada `*Vertex`.

Method dengan _pointer-receiver_ dapat mengubah nilai yang ditunjuk (seperti
yang dilakukan oleh `Scale`).
Karena method terkadang perlu mengubah _receiver_ nya, _pointer-receiver_
lebih umum digunakan daripada _receiver_ dengan value.

Coba hapus `*` dari deklarasi fungsi `Scale` pada baris 16 dan perhatikan
bagaimana perilaku program berubah.

Dengan receiver-sebagai-value, method `Scale` beroperasi pada salinan dari
nilai asli `Vertex`.
(Perilaku ini juga berlaku pada argumen pada fungsi.)
Method `Scale` harus memiliki sebuah pointer-receiver untuk dapat mengubah
nilai `Vertex` yang dideklarasikan pada fungsi `main`.

.play methods/methods-pointers.go

* Pointers dan fungsi

Di sini kita lihat method `Abs` dan `Scale` dibuat ulang sebagai fungsi.

Sekali lagi, coba hilangkan `*` pada baris 16.
Bisakah anda melihat perubahan perilakunya?
Apa yang harus anda ubah selanjutnya supaya contoh tersebut dapat di
kompilasi?

(Jika anda tidak yakin, lanjutkan ke halaman berikutnya.)

.play methods/methods-pointers-explained.go

* Method dan pointer tidak langsung

Bandingkan dua program sebelumnya, anda mungkin memperhatikan bahwa fungsi
dengan sebuah argumen pointer harus menerima sebuah pointer:

	var V Vertex
	ScaleFunc(v, 5)  // Compile error!
	ScaleFunc(&v, 5) // OK

Sementara method dengan pointer-receiver dapat menerima sebuah nilai atau
sebuah pointer sebagai receiver saat dipanggil:

	var v Vertex
	v.Scale(5)   // OK
	p := &v
	p.Scale(10)  // OK

Untuk perintah `v.Scale(5)`, walaupun `v` adalah sebuah nilai bukan sebuah
pointer, method dengan pointer-receiver akan dipanggil secara otomatis.
Maka, untuk mempermudah, Go menginterpretasikan perintah `v.Scale(5)` sebagai
`(&v).Scale(5)` karena method Scale memiliki pointer-receiver. 

.play methods/indirection.go

* Method dan pointer tidak langsung (2)

Hal yang sama berlaku sebaliknya.

Fungsi yang menerima argumen nilai harus mendapatkan sebuah nilai dari tipe
yang spesifik:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

Sementara method dengan value-receiver bisa menerima sebuah nilai atau sebuah
pointer sebagai receiver saat dipanggil:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

Pada kasus ini, pemanggilan method `p.Abs()` diinterpretasikan sebagai
`(*p).Abs()`.

.play methods/indirection-values.go

* Memilih receiver sebagai nilai atau pointer

Ada dua alasan kenapa menggunakan _pointer-receiver_.

Pertama adalah supaya method dapat mengubah nilai yang ditunjuk oleh receiver.

Kedua adalah untuk menghindari menyalin nilai setiap kali method dipanggil.
Hal ini bisa lebih efisien jika receiver adalah sebuah struct yang besar,
sebagai contohnya.

Pada contoh ini, `Scale` dan `Abs` memiliki tipe receiver `*Vertex`, walaupun
method `Abs` tidak perlu mengubah receiver-nya.

Secara umum, semua method dari sebuah tipe harus memiliki receiver sebagai
nilai atau sebagai pointer, tapi tidak gabungan dari keduanya.
(Kita akan lihat alasannya pada beberapa laman berikutnya.)

.play methods/methods-with-pointer-receivers.go

* Interface

Sebuah _type_interface_ didefinisikan sebagai sebuah kumpulan method penanda.

Nilai dari tipe interface dapat menyimpan nilai apapun yang
mengimplementasikan method tersebut.

*Catatan:* Terdapat kesalahan di contoh kode pada baris 22.
`Vertex` (tipe nilai) tidak memenuhi `Abser` karena method `Abs` hanya
didefinisikan pada `*Vertex` (tipe pointer).

.play methods/interfaces.go

* Interface dipenuhi secara implisit

Sebuah tipe mengimplementasikan sebuah interface dengan mengimplementasikan
method-methodnya.
Tidak ada deklarasi eksplisit; tidak ada perintah "implements".

Interface implisit memisahkan definisi dari sebuah interface dari
implementasinya, yang bisa saja muncul dalam paket manapun tanpa adanya
penataan sebelumnya.

.play methods/interfaces-are-satisfied-implicitly.go

* Nilai interface

Isi interface dapat dibayangkan sebagai sebuah pasangan nilai dan sebuah tipe:

	(nilai, tipe)

Sebuah interface mengandung sebuah nilai dari tipe tertentu.

Memanggil suatu method terhadap suatu interface akan mengeksekusi method
dengan nama yang sama pada tipe yang dipegangnya.

.play methods/interface-values.go

* Interface dengan nilai nil

Jika nilai sebenarnya dari interface itu sendiri adalah nil, method akan
dipanggil dengan receiver bernilai nil.

Pada beberapa bahasa pemrograman hal ini akan mengakibatkan
`null`pointer`exception` atau kesalahan karena pointer bernilai kosong, tapi
pada Go sangat umum menulis method dengan receiver bernilai nil (seperti
method `M` pada contoh di sebelah.)

Ingatlah bahwa sebuah isi interface yang mengandung nilai konkrit nil
sebenarnya adalah non-nil.

.play methods/interface-values-with-nil.go

* Isi interface dengan nil

Sebuah isi interface yang nil tidak mengandung nilai dan tipe konkrit.

Memanggil sebuah method pada sebuah interface yang nil akan mengakibatkan
kesalahan run-time karena tidak ada tipe di dalam interface yang
mengindikasikan method _konkrit_ yang akan dipanggil.

.play methods/nil-interface-values.go

* Interface kosong

Tipe interface yang tidak memiliki method dikenal juga dengan interface
kosong:

	interface{}

Sebuah interface kosong bisa menyimpan nilai dari tipe apapun.
(Setiap tipe mengimplementasikan paling tidak nol method.)

Interface kosong digunakan pada kode yang menangani nilai yang tidak
diketahui.
Sebagai contohnya, `fmt.Print` mengambil sejumlah argumen dengan tipe
`interface{}`.

.play methods/empty-interface.go

* Penegasan tipe

Suatu _penegasan_tipe_ menyediakan akses ke isi interface di balik nilai
konkritnya.

	t := i.(T)

Perintah di atas menegaskan bahwa isi interface `i` menyimpan tipe konkrit `T`
dan memberikan nilai `T` ke variabel `t`.

Jika `i` tidak mengandung tipe `T`, perintah tersebut akan memicu `panic`.

Untuk _memeriksa_ apakah sebuah isi interface benar mengandung tipe tertentu,
penegasan tipe bisa mengembalikan dua nilai: nilai yang dikandung dan sebuah
nilai boolean yang memberitahu apakah penegasan sukses atau tidak.

	t, ok := i.(T)

Jika `i` mengandung `T`, maka `t` akan menyimpan nilai dan `ok` akan bernilai
true.

Jika tidak, `ok` akan bernilai false dan `t` akan bernilai kosong sesuai
dengan tipe `T`, dan panic tidak akan terjadi.

Ingatlah kesamaan antara sintaks ini dengan membaca dari sebuah map.

.play methods/type-assertions.go

* Penggunaan switch untuk tipe

Sebuah _tipe_switch_ adalah bentukan yang membolehkan beberapa penegasan tipe
secara serial.

Tipe switch sama seperti perintah switch biasa, tapi dengan nilai case mengacu
pada tipe (bukan nilai), dan nilai case tersebut dibandingkan dengan tipe yang
dikandung oleh isi interface yang diberikan.

	switch v := i.(type) {
	case T:
		// di sini v bertipe T
	case S:
		// di sini v bertipe S
	default:
		// tidak ada yang cocok; disini v bertipe sama dengan i
	}

Deklarasi dalam sebuah tipe switch memiliki sintaks yang sama dengan penegasan
tipe `i.(T)`, tapi dengan `T` diganti dengan kata `type`.

Perintah switch berikut menguji apakah isi interface `i` mengandung sebuah
nilai dari tipe `T` atau `S`.
Pada setiap `case` dari `T` dan `S`, variabel `v` akan memiliki tipe `T` atau
`S` dan memiliki nilai yang dikandung oleh `i`.
Pada `default case` (yang mana tidak ada tipe yang sama ditemukan), variabel
`v` akan memiliki tipe dan nilai yang sama dengan `i`.

.play methods/type-switches.go

* Stringer

Interface yang ada dimanapun yaitu
[[//golang.org/pkg/fmt/#Stringer][`Stringer`]]
didefinisikan oleh paket
[[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Sebuah `Stringer` adalah suatu tipe yang mendeskripsikan dirinya sendiri
sebagai string.
Paket `fmt` (dan banyak lainnya) menggunakan interface ini untuk mencetak
nilai.

.play methods/stringer.go

* Latihan: Stringer

Buat tipe `IPAddr` yang mengimplementasikan `fmt.Stringer` untuk mencetak
alamat dengan empat tanda titik.

Misalnya, `IPAddr{1,`2,`3,`4}` mengeluarkan `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Error

Program Go mengekspresikan keadaan error dengan nilai `error`.

Tipe `error` adalah interface buatan mirip dengan `fmt.Stringer`:

	type error interface {
		Error() string
	}

Seperti dengan `fmt.Stringer`, paket `fmt` mencari interface `error` saat
mencetak nilai.

Fungsi terkadang mengembalikan nilai `error`, dan kode yang memanggilnya harus
menangani error dengan memeriksa apakah error bernilai `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

`error` yang nil menandakan sukses; `error` yang bukan-nil menandakan adanya
kesalahan.

.play methods/errors.go

* Latihan: Error

Salin fungsi `Sqrt` anda dari
[[/flowcontrol/8][latihan sebelumnya]]
dan ubah untuk mengembalikan nilai `error`.

`Sqrt` seharusnya mengembalikan nilai error bukan-nil saat diberikan angka
negatif, karena tidak mendukung bilangan kompleks.

Buatlah tipe baru

	type ErrNegativeSqrt float64

dan buat dia sebagai `error` dengan memberikan method

	func (e ErrNegativeSqrt) Error() string

sehingga `ErrNegativeSqrt(-2).Error()` mengembalikan
`"cannot`Sqrt`negative`number:`-2"`.

*Catatan:* Pemanggilan `fmt.Sprint(e)` di dalam method `Error` akan membuat
program berulang tak henti.
Anda dapat menghindari hal tersebut dengan mengkonversi `e`:
`fmt.Sprint(float64(e))`.  _Kenapa?_

Ubah fungsi `Sqrt` mengembalikan nilai `ErrNegativeSqrt` saat diberikan nilai
negatif.

.play methods/exercise-errors.go

* Reader

Paket `io` memiliki spesifikasi interface `io.Reader`, yang merepresentasikan
berakhirnya pembacaan sebuah aliran data.

Standar pustaka Go memiliki
[[https://golang.org/search?q=Read#Global][banyak implementasi]]
dari interface tersebut, termasuk berkas, koneksi jaringan, kompresi,
_cipher_, dll.

Interface `io.Reader` memiliki method `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` mengisi parameter slice byte dengan data dan mengembalikan jumlah
byte yang diisi dan nilai errornya jika ada.
Ia mengembalikan error `io.EOF` saat aliran data berakhir.

Contoh kode membuat sebuah 
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
dan memproses 8 bytes keluarannya.

.play methods/reader.go

* Latihan: Reader

Implementasikan sebuah tipe `Reader` yang menghilangkan karakter ASCII `'A'`
yang panjang.

.play methods/exercise-reader.go

* Latihan: rot13Reader

Pola umumnya adalah sebuah
[[https://golang.org/pkg/io/#Reader][io.Reader]]
yang membungkus `io.Reader` lainnya, memodifikasi aliran data dengan cara
tertentu.

Sebagai contohnya, fungsi 
[[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]]
mengambil `io.Reader` (aliran data terkompres) dan mengembalikan
`*gzip.Reader` yang juga mengimplementasikan `io.Reader` (aliran data
tak-terkompres).

Implementasikan `rot13Reader` yang mengimplementasikan `io.Reader` dengan
membaca dari `io.Reader`, modifikasi aliran data dengan menerapkan penyandian
[[https://en.wikipedia.org/wiki/ROT13][rot13]]
terhadap semua karakter alfabet.

Tipe `rot13Reader` telah disediakan untuk anda.
Buatlah ia menjadi `io.Reader` dengan mengimplementasikan method `Read`.

.play methods/exercise-rot-reader.go

* Gambar

[[https://golang.org/pkg/image/#Image][Paket image]]
mendefinisikan interface `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Catatan*: Nilai kembalian `Rectangle` dari method `Bounds` sebenarnya adalah
deklarasi
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]
yang telah ada di dalam paket `image`.

(Lihat
[[https://golang.org/pkg/image/#Image][dokumentasi untuk paket Image]]
untuk lebih jelasnya.)

Tipe `color.Color` dan `color.Model` juga interface, tapi kita akan
menggunakan implementasi `color.RGBA` dan `color.RGBAModel`.
Interface dan tipe tersebut dispesifikasikan oleh 
[[https://golang.org/pkg/image/color/][paket image/color]].

.play methods/images.go

* Latihan: Gambar

Masih ingat dengan [[/moretypes/18][generator gambar]] yang anda buat
sebelumnya?
Mari kita buat satu lagi, tapi kali ini mengembalikan implementasi dari
`image.Image` bukan sebuah slice dari data.

Definisikan tipe `Image` anda sendiri, kemudian implementasikan
[[https://golang.org/pkg/image/#Image][method-method yang dibutuhkan]]
, dan panggil `pic.ShowImage`.

`Bounds` seharusnya mengembalikan `image.Rectangle`, seperti
`image.Rect(0,`0,`w,`h)`.

`ColorModel` seharusnya mengembalikan `color.RGBAModel`.

`At` seharusnya mengembalikan sebuah warna;
nilai `v` pada generator gambar berkoresponden dengan
`color.RGBA{v,`v,`255,`255}`.

.play methods/exercise-images.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan ke
[[javascript:click(".next-page")][pelajaran selanjutnya]].
